using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EncryptionTool.Model.CRYPTON
{
    public class CryptonMethod : IEncryptionMethod
    {
        private byte[] _key;
        private IKeyExpander _expander;

        public CryptonMethod(byte[] key)
        {
            _key = key;
            _expander = new CryptonKeyExpander();
        }

        public byte[] Decode(byte[] text)
        {
            var blocks = SplitToBlocks(text);
            var keys = SplitToBlocks(_expander.Expand(_key));
            var result = new List<byte>();

            foreach (var block in blocks)
            {
                var blk = block;
                for (int round = 0; round >= 0; --round)
                {
                    blk = DoRound(round % 2 == 0 ? RoundTypes.EvenRound : RoundTypes.OddRound, blk, keys[round + 1], true);
                }
                result.AddRange(blk);
            }

            //for (int i = result.Count - 1; i >= 0; --i)
            //{
            //    if (result[i] == 0)
            //        result.RemoveAt(i);
            //    else
            //        break;
            //}

            return result.ToArray();
        }

        public byte[] Encode(byte[] text)
        {
            var blocks = SplitToBlocks(text);
            var keys = SplitToBlocks(_expander.Expand(_key));
            var result = new List<byte>();

            foreach (var block in blocks)
            {
                var blk = block;
                for (int round = 0; round < 1; ++round)
                {
                    blk = DoRound(round % 2 == 0? RoundTypes.EvenRound : RoundTypes.OddRound, blk, keys[round + 1]);
                }
                result.AddRange(blk);
            }
            return result.ToArray();
        }

        public List<byte[]> SplitToBlocks(byte[] text)
        {
            var blocks = new List<byte[]>();
            var block = new byte[16];
            int i = 0;

            for (i = 0; i < text.Length; ++i)
            {
                block[i % 16] = text[i];

                if (i % 16 == 15)
                {
                    blocks.Add(block);
                    block = new byte[16];
                }
            }

            if (i % 16 != 15 && i % 16 != 0)
                blocks.Add(block);

            return blocks;
        }

        public static byte[] JoinToArray(IEnumerable<byte[]> blocks)
        {
            var result = new List<byte>();

            foreach (var x in blocks)
                result.AddRange(x);

            return result.ToArray();
        }

        internal static byte[] DoRound(RoundTypes round, byte[] block, byte[] key, bool decode = false)
        {
            var result = new byte[4, 4];
            var keyBlock = new byte[4, 4];

            for (int i = 0; i < block.Length; ++i)
            {
                result[i / 4, i % 4] = block[i];
                keyBlock[i / 4, i % 4] = key[i];
            }
            if (!decode)
            {
                result = TableReplace(result, round, decode);
                result = LineTransform(result, round);
                result = ByteReplace(result);
                result = KeyApply(result, keyBlock);
            }
            else
            {
                result = KeyApply(result, keyBlock);
                result = ByteReplace(result);
                result = LineTransform(result, round);
                result = TableReplace(result, round, decode);
            }

            var res = new byte[16];

            for (int i = 0; i < 4; ++i)
                for (int j = 0; j < 4; ++j)
                    res[i * 4 + j] = result[i, j];

            return res;
        }

        public static byte[,] TableReplace(byte[,] block, RoundTypes type, bool decode)
        {

            var result = new byte[4, 4];

            for (int i = 0; i < 4; ++i)
            {
                for (int j = 0; j < 4; ++j)
                {
                    var x = block[i, j] / 16;
                    var y = block[i, j] % 16;
                    var table = GetTable(type, i, j, decode);
                    result[i, j] = table[x, y];
                }
            }

            return result;
        }

        private static byte[,] GetTable(RoundTypes type, int i, int j, bool decode)
        {
            #region tables 
            byte[,] S0 = new byte[,] {
                { 0x63, 0xec, 0x59, 0xaa, 0xdb, 0x8e, 0x66, 0xc0, 0x37, 0x3c, 0x14, 0xff, 0x13, 0x44, 0xa9, 0x91 },
                { 0x3b, 0x78, 0x8d, 0xef, 0xc2, 0x2a, 0xf0, 0xd7, 0x61, 0x9e, 0xa5, 0xbc, 0x48, 0x15, 0x12, 0x47 },
                { 0xed, 0x42, 0x1a, 0x33, 0x38, 0xc8, 0x17, 0x90, 0xa6, 0xd5, 0x5d, 0x65, 0x6a, 0xfe, 0x8f, 0xa1 },
                { 0x93, 0xc2, 0x2f, 0x0c, 0x68, 0x58, 0xdf, 0xf4, 0x45, 0x11, 0xa0, 0xa7, 0x22, 0x96, 0xfb, 0x7d },
                { 0x1d, 0xb4, 0x84, 0xe0, 0xbf, 0x57, 0xe9, 0x0a, 0x4e, 0x83, 0xcc, 0x7a, 0x71, 0x39, 0xc7, 0x32 },
                { 0x74, 0x3d, 0xde, 0x50, 0x85, 0x06, 0x6f, 0x53, 0xe8, 0xad, 0x82, 0x19, 0xe1, 0xba, 0x36, 0xcb },
                { 0x0e, 0x28, 0xf3, 0x9b, 0x4a, 0x62, 0x94, 0x1f, 0xbd, 0xf6, 0x67, 0x41, 0xd8, 0xd1, 0x2d, 0xa4 },
                { 0x86, 0xb7, 0x01, 0xc5, 0xb0, 0x75, 0x02, 0xf9, 0x2c, 0x29, 0x6e, 0xd2, 0xf5, 0x8b, 0xfc, 0x5a },
                { 0xe4, 0x7f, 0xdd, 0x07, 0x55, 0xb1, 0x2b, 0x89, 0x72, 0x18, 0x3a, 0x4c, 0xb6, 0xe3, 0x80, 0xce },
                { 0x49, 0xcf, 0x6b, 0xb9, 0xf2, 0x0d, 0xdc, 0x64, 0x95, 0x46, 0xf7, 0x10, 0x9a, 0x20, 0xa2, 0x3f },
                { 0xd6, 0x87, 0x70, 0x3e, 0x21, 0xfd, 0x4d, 0x7b, 0x3c, 0xae, 0x09, 0x8a, 0x04, 0xb3, 0x54, 0xf8 },
                { 0x30, 0x00, 0x56, 0xd4, 0xe7, 0x25, 0xbb, 0xac, 0x98, 0x73, 0xea, 0xc9, 0x9d, 0x4f, 0x7e, 0x03 },
                { 0xab, 0x92, 0xa8, 0x43, 0x0f, 0xfa, 0x24, 0x5c, 0x1e, 0x60, 0x31, 0x97, 0xcd, 0xc6, 0x79, 0xf5 },
                { 0x5e, 0xe5, 0x34, 0x76, 0x1c, 0x81, 0xb2, 0xaf, 0x0b, 0x5d, 0xd9, 0xe2, 0x27, 0x6d, 0xd0, 0x88 },
                { 0xc1, 0x51, 0xe6, 0x9c, 0x77, 0xbe, 0x99, 0x23, 0xda, 0xeb, 0x52, 0x2e, 0xb5, 0x08, 0x05, 0x6c },
                { 0xb8, 0x1b, 0xa3, 0x69, 0x8c, 0xd3, 0x40, 0x26, 0xf1, 0xc4, 0x9f, 0x35, 0xee, 0x7c, 0x4b, 0x16 }
            };

            byte[,] S1 = new byte[,] {
                { 0x8d, 0xb3, 0x65, 0xaa, 0x6f, 0x3a, 0x99, 0x03, 0xdc, 0xf0, 0x50, 0xff, 0x4c, 0x11, 0xa6, 0x46 },
                { 0xec, 0xe1, 0x36, 0xbf, 0x0b, 0xa8, 0xc3, 0x5f, 0x85, 0x7a, 0x96, 0xf2, 0x21, 0x54, 0x48, 0x1d },
                { 0xb7, 0x09, 0x68, 0xcc, 0xe0, 0x23, 0x5c, 0x42, 0x9a, 0x57, 0x75, 0x95, 0xa9, 0xfb, 0x3e, 0x86 },
                { 0x4e, 0x2b, 0xbc, 0x30, 0xa1, 0x61, 0x7f, 0xd3, 0x15, 0x44, 0x82, 0x9e, 0x88, 0x5a, 0xEf, 0xf5 },
                { 0x74, 0xd2, 0x12, 0x83, 0xfe, 0x5d, 0xa7, 0x28, 0x39, 0x0e, 0x33, 0xe9, 0xc5, 0xe4, 0x1f, 0xc8 },
                { 0xd1, 0xf4, 0x7b, 0x41, 0x16, 0x18, 0xbd, 0x4d, 0xa3, 0xb6, 0x0a, 0x64, 0x87, 0xea, 0xd8, 0x2f },
                { 0x38, 0xa0, 0xcf, 0x6e, 0x29, 0x89, 0x52, 0x7c, 0xf6, 0xdb, 0x9d, 0x05, 0x63, 0x47, 0xb4, 0x92 },
                { 0x1a, 0xde, 0x04, 0x17, 0xc2, 0xd5, 0x08, 0xe7, 0xb0, 0xa4, 0xb9, 0x4b, 0x7d, 0x2e, 0xf3, 0x69 },
                { 0x93, 0xfd, 0x77, 0x1c, 0x55, 0xc6, 0xac, 0x26, 0xc9, 0x60, 0xe8, 0x31, 0xda, 0x8f, 0x02, 0x3b },
                { 0x25, 0x3f, 0xad, 0xe6, 0xcb, 0x34, 0x73, 0x91, 0x56, 0x19, 0xdf, 0x40, 0x6a, 0x80, 0x8a, 0xfc },
                { 0x5b, 0x1e, 0xc1, 0xf8, 0x84, 0xf7, 0x35, 0xed, 0x0f, 0xba, 0x24, 0x2a, 0x10, 0xce, 0x51, 0xe3 },
                { 0xc0, 0x00, 0x59, 0x53, 0x9f, 0x94, 0xee, 0xb2, 0x62, 0xcd, 0xab, 0x27, 0x76, 0x3d, 0xf9, 0x0c },
                { 0xae, 0x4a, 0xa2, 0x0d, 0x3c, 0xeb, 0x90, 0x71, 0x78, 0x81, 0xc4, 0x5e, 0x37, 0x1b, 0xe5, 0xd7 },
                { 0x79, 0x97, 0xd0, 0xd9, 0x70, 0x06, 0xca, 0xbe, 0x2c, 0x6d, 0x67, 0x8b, 0x9c, 0xb5, 0x43, 0x22 },
                { 0x07, 0x45, 0x9b, 0x72, 0xdd, 0xfa, 0x66, 0x8c, 0x6b, 0xaf, 0x49, 0xb8, 0xd6, 0x20, 0x14, 0xb1 },
                { 0xe2, 0x6c, 0x8e, 0xa5, 0x32, 0x4f, 0x01, 0x98, 0xc7, 0x13, 0x7e, 0xd4, 0xbb, 0xf1, 0x2d, 0x58 }
            };

            byte[,] S2 = new byte[,] {
                { 0xb1, 0x72, 0x76, 0xbf, 0xac, 0xee, 0x55, 0x83, 0xed, 0xaa, 0x47, 0xd8, 0x33, 0x95, 0x60, 0xc4 },
                { 0x9b, 0x39, 0x1e, 0x0c, 0x0a, 0x1d, 0xff, 0x26, 0x89, 0x5b, 0x22, 0xf1, 0xd4, 0x40, 0xc8, 0x67 },
                { 0x9d, 0xa4, 0x3c, 0xe7, 0xc6, 0xb5, 0xf7, 0xdc, 0x61, 0x79, 0x15, 0x86, 0x78, 0x6e, 0xeb, 0x32 },
                { 0xb0, 0xca, 0x4f, 0x23, 0xd2, 0xfb, 0x5e, 0x08, 0x24, 0x4d, 0x8a, 0x10, 0x09, 0x51, 0xa3, 0x9f },
                { 0xf6, 0x6b, 0x21, 0xc3, 0x0d, 0x38, 0x99, 0x1f, 0x1c, 0x90, 0x64, 0xfe, 0x8b, 0xa6, 0x48, 0xbd },
                { 0x53, 0xe1, 0xea, 0x57, 0xae, 0x84, 0xb2, 0x45, 0x35, 0x02, 0x7f, 0xd9, 0xc7, 0x2a, 0xd0, 0x7c },
                { 0xc9, 0x18, 0x65, 0x00, 0x97, 0x2b, 0x06, 0x6a, 0x34, 0xf3, 0x2c, 0x92, 0xef, 0xdd, 0x7a, 0x56 },
                { 0xa2, 0xc4, 0x88, 0xb9, 0x50, 0x75, 0xd3, 0xe4, 0x11, 0xce, 0x4b, 0xa7, 0xfd, 0x3f, 0xbe, 0x81 },
                { 0x8e, 0xd5, 0x5a, 0x49, 0x42, 0x54, 0x70, 0xa1, 0xdf, 0x87, 0xab, 0x7d, 0xf4, 0x12, 0x05, 0x2e },
                { 0x27, 0x0f, 0xc1, 0x30, 0x66, 0x98, 0x3d, 0xcb, 0xb8, 0xe6, 0x9c, 0x63, 0xe3, 0xbc, 0x19, 0xfa },
                { 0x3a, 0x2f, 0x9e, 0xf2, 0x6f, 0x1a, 0x28, 0x3b, 0xc2, 0x0e, 0x03, 0xc0, 0xb7, 0x59, 0xa9, 0xd7 },
                { 0x74, 0x85, 0xd6, 0xad, 0x41, 0xec, 0x8c, 0x71, 0xf0, 0x93, 0x5d, 0xb6, 0x1b, 0x68, 0xe5, 0x44 },
                { 0x07, 0xe0, 0x14, 0x8a, 0xf9, 0x73, 0xcd, 0x4e, 0x25, 0xbb, 0x31, 0x5f, 0x4a, 0xcc, 0x8f, 0x91 },
                { 0xde, 0x6d, 0x7b, 0xf5, 0xb3, 0x29, 0xa0, 0x17, 0x6c, 0xda, 0xe8, 0x04, 0x96, 0x82, 0x52, 0x36 },
                { 0x43, 0x5c, 0xdb, 0x8d, 0x80, 0xd1, 0xe2, 0xb4, 0x58, 0x46, 0xba, 0xe9, 0x01, 0x20, 0xfc, 0x13 },
                { 0x16, 0xf8, 0x94, 0x62, 0x37, 0xcf, 0x69, 0x9a, 0xaf, 0x77, 0xc5, 0x3e, 0x7e, 0xa5, 0x2d, 0x0b }
            };

            byte[,] S3 = new byte[,]{
                { 0xb1, 0xf6, 0x8e, 0x07, 0x72, 0x6b, 0xd5, 0xe0, 0x76, 0x21, 0x5a, 0x14, 0xbf, 0xc3, 0x49, 0xa8 },
                { 0xac, 0x0d, 0x42, 0xf9, 0xee, 0x38, 0x54, 0x73, 0x55, 0x99, 0x70, 0xcd, 0x83, 0x1f, 0xa1, 0x4e },
                { 0xed, 0x1c, 0xdf, 0x25, 0xaa, 0x90, 0x87, 0xbb, 0x47, 0x64, 0xab, 0x31, 0xd8, 0xfe, 0x7d, 0x5f },
                { 0x33, 0x8b, 0xf4, 0x4a, 0x95, 0xa6, 0x12, 0xcc, 0x60, 0x48, 0x05, 0x8f, 0xc4, 0xbd, 0x2e, 0x91 },
                { 0x9b, 0x53, 0x27, 0xde, 0x39, 0xe1, 0x0f, 0x6d, 0x1e, 0xea, 0xc1, 0x7b, 0x0c, 0x57, 0x30, 0xf5 },
                { 0x0a, 0xae, 0x66, 0xb3, 0x1d, 0x84, 0x98, 0x29, 0xff, 0xb2, 0x3d, 0xa0, 0x26, 0x45, 0xcb, 0x17 },
                { 0x89, 0x35, 0xb8, 0x6c, 0x5b, 0x02, 0xe6, 0xda, 0x22, 0x7f, 0x9c, 0xe8, 0xf1, 0xd9, 0x63, 0x04 },
                { 0xd4, 0xc7, 0xe3, 0x96, 0x40, 0x2a, 0xbc, 0x82, 0xc8, 0xd0, 0x19, 0x52, 0x67, 0x7c, 0xfa, 0x36 },
                { 0x9d, 0xc9, 0x3a, 0x43, 0xa4, 0x18, 0x2f, 0x5c, 0x3c, 0x65, 0x9e, 0xdb, 0xe7, 0x00, 0xf2, 0x8d },
                { 0xc6, 0x97, 0x6f, 0x80, 0xb5, 0x2b, 0x1a, 0xd1, 0xf7, 0x06, 0x28, 0xe2, 0xdc, 0x6a, 0x3b, 0xb4 },
                { 0x61, 0x34, 0xc2, 0x58, 0x79, 0xf3, 0x0e, 0x46, 0x15, 0x2c, 0x03, 0xba, 0x86, 0x92, 0xc0, 0xe9 },
                { 0x78, 0xef, 0xb7, 0x01, 0x6e, 0xdd, 0x59, 0x20, 0xeb, 0x7a, 0xa9, 0xfc, 0x32, 0x56, 0xd7, 0x13 },
                { 0xb0, 0xa2, 0x74, 0x16, 0xca, 0x4c, 0x85, 0xf8, 0x4f, 0x88, 0xd6, 0x94, 0x23, 0xb9, 0xad, 0x62 },
                { 0xd2, 0x50, 0x41, 0x37, 0xfb, 0x75, 0xec, 0xcf, 0x5e, 0xd3, 0x8c, 0x69, 0x08, 0xe4, 0x71, 0x9a },
                { 0x24, 0x11, 0xf0, 0xaf, 0x4d, 0xce, 0x93, 0x77, 0x8a, 0x4b, 0x5d, 0xc5, 0x10, 0xa7, 0xb6, 0x3e },
                { 0x09, 0xfd, 0x1b, 0x7e, 0x51, 0x3f, 0x68, 0xa5, 0xa3, 0xbe, 0xe5, 0x2d, 0x9f, 0x81, 0x44, 0x0b }
            };
            #endregion

            int tableId;
            if ((!decode && type == RoundTypes.EvenRound) || (decode && type == RoundTypes.OddRound))
                tableId = (j + 2 + i) % 4;
            else
                tableId = (j + i) % 4;

            switch (tableId)
            {
                case 0:
                    return S0;
                case 1:
                    return S1;
                case 2:
                    return S2;
                case 3:
                    return S3;
                default:
                    return null;
            }
        }

        private static byte[,] LineTransform(byte[,] block, RoundTypes type)
        {
            var result = new byte[4, 4];

            byte m0 = 0xFC;
            byte m1 = 0xF3;
            byte m2 = 0xCF;
            byte m3 = 0x3F;

            var M0 = new byte[] { m3, m2, m1, m0 };
            var M1 = new byte[] { m0, m3, m2, m1 };
            var M2 = new byte[] { m1, m0, m3, m2 };
            var M3 = new byte[] { m2, m1, m0, m3 };

            var A0 = new byte[] { block[0, 0], block[0, 1], block[0, 2], block[0, 3] };
            var A1 = new byte[] { block[1, 0], block[1, 1], block[1, 2], block[1, 3] };
            var A2 = new byte[] { block[2, 0], block[2, 1], block[2, 2], block[2, 3] };
            var A3 = new byte[] { block[3, 0], block[3, 1], block[3, 2], block[3, 3] };

            byte[] B0, B1, B2, B3;

            if (type == RoundTypes.OddRound)
            {
                B0 = BitXor(BitAnd(A3, M3), BitAnd(A2, M2), BitAnd(A1, M1), BitAnd(A0, M0));
                B1 = BitXor(BitAnd(A3, M0), BitAnd(A2, M3), BitAnd(A1, M2), BitAnd(A0, M1));
                B2 = BitXor(BitAnd(A3, M1), BitAnd(A2, M0), BitAnd(A1, M3), BitAnd(A0, M2));
                B3 = BitXor(BitAnd(A3, M2), BitAnd(A2, M1), BitAnd(A1, M0), BitAnd(A0, M3));
            }
            else
            {
                B0 = BitXor(BitAnd(A3, M1), BitAnd(A2, M0), BitAnd(A1, M3), BitAnd(A0, M2));
                B1 = BitXor(BitAnd(A3, M2), BitAnd(A2, M1), BitAnd(A1, M0), BitAnd(A0, M3));
                B2 = BitXor(BitAnd(A3, M3), BitAnd(A2, M2), BitAnd(A1, M1), BitAnd(A0, M0));
                B3 = BitXor(BitAnd(A3, M0), BitAnd(A2, M3), BitAnd(A1, M2), BitAnd(A0, M1));
            }

            for (int j = 0; j < 4; ++j)
            {
                result[0, j] = B0[j];
                result[1, j] = B1[j];
                result[2, j] = B2[j];
                result[3, j] = B3[j];
            }
            return result;
        }

        private static byte[] BitAnd(byte[] x, byte[] y)
        {
            var result = new byte[x.Length];
            for (int i = 0; i < x.Length; ++i)
                result[i] = (byte)(x[i] & y[i]);
            return result;
        }

        private static byte[] BitXor(byte[] x, byte[] y)
        {
            var result = new byte[x.Length];
            for (int i = 0; i < x.Length; ++i)
                result[i] = (byte)(x[i] ^ y[i]);
            return result;
        }

        private static byte[] BitXor(byte[] x, byte[] y, byte[] z, byte[] h)
        {
            var result = new byte[x.Length];
            for (int i = 0; i < x.Length; ++i)
                result[i] = (byte)(x[i] ^ y[i] ^ z[i] ^ h[i]);
            return result;
        }

        private static byte[,] ByteReplace(byte[,] block)
        {
            var result = new byte[4, 4];

            for (int i = 0; i < 4; ++i)
                for (int j = 0; j < 4; ++j)
                    result[i, j] = block[j, i];
                
            return result;
        }

        private static byte[,] KeyApply(byte[,] block, byte[,] key)
        {
            var result = new byte[4, 4];
            for (int i = 0; i < 4; ++i)
                for (int j = 0; j < 4; ++j)
                    result[i, j] = (byte)(block[i, j] ^ key[i, j]);
            return result;
        }
    }
}
